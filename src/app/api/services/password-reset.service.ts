/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { passwordResetsPost } from '../fn/password-reset/password-resets-post';
import { PasswordResetsPost$Params } from '../fn/password-reset/password-resets-post';
import { passwordResetsTokenGet } from '../fn/password-reset/password-resets-token-get';
import { PasswordResetsTokenGet$Params } from '../fn/password-reset/password-resets-token-get';
import { passwordResetsTokenPut } from '../fn/password-reset/password-resets-token-put';
import { PasswordResetsTokenPut$Params } from '../fn/password-reset/password-resets-token-put';

@Injectable({ providedIn: 'root' })
export class PasswordResetService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `passwordResetsTokenGet()` */
  static readonly PasswordResetsTokenGetPath = '/password-resets/{token}';

  /**
   * Verify token.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `passwordResetsTokenGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  passwordResetsTokenGet$Response(params: PasswordResetsTokenGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return passwordResetsTokenGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Verify token.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `passwordResetsTokenGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  passwordResetsTokenGet(params: PasswordResetsTokenGet$Params, context?: HttpContext): Observable<any> {
    return this.passwordResetsTokenGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `passwordResetsTokenPut()` */
  static readonly PasswordResetsTokenPutPath = '/password-resets/{token}';

  /**
   * Submit password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `passwordResetsTokenPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  passwordResetsTokenPut$Response(params: PasswordResetsTokenPut$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return passwordResetsTokenPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `passwordResetsTokenPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  passwordResetsTokenPut(params: PasswordResetsTokenPut$Params, context?: HttpContext): Observable<any> {
    return this.passwordResetsTokenPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `passwordResetsPost()` */
  static readonly PasswordResetsPostPath = '/password-resets';

  /**
   * Send email.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `passwordResetsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  passwordResetsPost$Response(params?: PasswordResetsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return passwordResetsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Send email.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `passwordResetsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  passwordResetsPost(params?: PasswordResetsPost$Params, context?: HttpContext): Observable<any> {
    return this.passwordResetsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

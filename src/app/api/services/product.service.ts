/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiConfiguration } from '../api-configuration';
import { BaseService } from '../base-service';
import { StrictHttpResponse } from '../strict-http-response';

import { ProductsGet$Params, productsGet } from '../fn/product/products-get';
import { ProductsIdDelete$Params, productsIdDelete } from '../fn/product/products-id-delete';
import { ProductsIdGet$Params, productsIdGet } from '../fn/product/products-id-get';
import { ProductsIdPut$Params, productsIdPut } from '../fn/product/products-id-put';
import { ProductsPost$Params, productsPost } from '../fn/product/products-post';
import { CategorieSchema } from './categorie.service';

export interface ProductSchema {
  id: string;
  name: string;
  description: string;
  price: number;
  categoryId: string;
  stock: number;
  imageUrl: string;
  createdBy: string;
  category?: CategorieSchema;
}

@Injectable({ providedIn: 'root' })
export class ProductService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `productsIdGet()` */
  static readonly ProductsIdGetPath = '/products/{id}';

  /**
   * Retrieve product.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdGet$Response(
    params: ProductsIdGet$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<ProductSchema>> {
    return productsIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve product.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdGet(params: ProductsIdGet$Params, context?: HttpContext): Observable<ProductSchema> {
    return this.productsIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductSchema>): ProductSchema => r.body),
    );
  }

  /** Path part for operation `productsIdPut()` */
  static readonly ProductsIdPutPath = '/products/{id}';

  /**
   * Update product.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsIdPut$Response(
    params: ProductsIdPut$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<ProductSchema>> {
    return productsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update product.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsIdPut(params: ProductsIdPut$Params, context?: HttpContext): Observable<ProductSchema> {
    return this.productsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductSchema>): ProductSchema => r.body),
    );
  }

  /** Path part for operation `productsIdDelete()` */
  static readonly ProductsIdDeletePath = '/products/{id}';

  /**
   * Delete product.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdDelete$Response(
    params: ProductsIdDelete$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<void>> {
    return productsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete product.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdDelete(params: ProductsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.productsIdDelete$Response(params, context).pipe(map((r: StrictHttpResponse<void>): void => r.body));
  }

  /** Path part for operation `productsGet()` */
  static readonly ProductsGetPath = '/products';

  /**
   * List products.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsGet$Response(
    params?: ProductsGet$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<ProductSchema[]>> {
    return productsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List products.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsGet(params?: ProductsGet$Params, context?: HttpContext): Observable<ProductSchema[]> {
    return this.productsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductSchema[]>): ProductSchema[] => r.body),
    );
  }

  /** Path part for operation `productsPost()` */
  static readonly ProductsPostPath = '/products';

  /**
   * Create product.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsPost$Response(
    params?: ProductsPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<ProductSchema>> {
    return productsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create product.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsPost(params?: ProductsPost$Params, context?: HttpContext): Observable<ProductSchema> {
    return this.productsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductSchema>): ProductSchema => r.body),
    );
  }
}

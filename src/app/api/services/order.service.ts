/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ordersGet } from '../fn/order/orders-get';
import { OrdersGet$Params } from '../fn/order/orders-get';
import { ordersIdDelete } from '../fn/order/orders-id-delete';
import { OrdersIdDelete$Params } from '../fn/order/orders-id-delete';
import { ordersIdGet } from '../fn/order/orders-id-get';
import { OrdersIdGet$Params } from '../fn/order/orders-id-get';
import { ordersIdPut } from '../fn/order/orders-id-put';
import { OrdersIdPut$Params } from '../fn/order/orders-id-put';
import { ordersPost } from '../fn/order/orders-post';
import { OrdersPost$Params } from '../fn/order/orders-post';

@Injectable({ providedIn: 'root' })
export class OrderService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `ordersIdGet()` */
  static readonly OrdersIdGetPath = '/orders/{id}';

  /**
   * Retrieve order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdGet$Response(params: OrdersIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return ordersIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdGet(params: OrdersIdGet$Params, context?: HttpContext): Observable<any> {
    return this.ordersIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `ordersIdPut()` */
  static readonly OrdersIdPutPath = '/orders/{id}';

  /**
   * Update order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersIdPut$Response(params: OrdersIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return ordersIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersIdPut(params: OrdersIdPut$Params, context?: HttpContext): Observable<any> {
    return this.ordersIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `ordersIdDelete()` */
  static readonly OrdersIdDeletePath = '/orders/{id}';

  /**
   * Delete order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdDelete$Response(params: OrdersIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return ordersIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdDelete(params: OrdersIdDelete$Params, context?: HttpContext): Observable<any> {
    return this.ordersIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `ordersGet()` */
  static readonly OrdersGetPath = '/orders';

  /**
   * List orders.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersGet$Response(params?: OrdersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return ordersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List orders.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersGet(params?: OrdersGet$Params, context?: HttpContext): Observable<any> {
    return this.ordersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `ordersPost()` */
  static readonly OrdersPostPath = '/orders';

  /**
   * Create order.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersPost$Response(params?: OrdersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return ordersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create order.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersPost(params?: OrdersPost$Params, context?: HttpContext): Observable<any> {
    return this.ordersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

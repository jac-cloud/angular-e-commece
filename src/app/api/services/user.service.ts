/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiConfiguration } from '../api-configuration';
import { BaseService } from '../base-service';
import { StrictHttpResponse } from '../strict-http-response';

import { UsersGet$Params, usersGet } from '../fn/user/users-get';
import { UsersIdDelete$Params, usersIdDelete } from '../fn/user/users-id-delete';
import { UsersIdGet$Params, usersIdGet } from '../fn/user/users-id-get';
import { UsersIdPasswordPut$Params, usersIdPasswordPut } from '../fn/user/users-id-password-put';
import { UsersIdPasswordResetPut$Params, usersIdPasswordResetPut } from '../fn/user/users-id-password-reset-put';
import { UsersIdPut$Params, usersIdPut } from '../fn/user/users-id-put';
import { UsersMeDelete$Params, usersMeDelete } from '../fn/user/users-me-delete';
import { UsersMeGet$Params, usersMeGet } from '../fn/user/users-me-get';
import { UsersPost$Params, usersPost } from '../fn/user/users-post';

export interface UserSchema {
  id: string;
  email: string;
  password?: string; // Optional because it's `select: false` in the schema
  role: string;
  isConfirmed: boolean;
  name?: string; // Optional as it isn't set required: true in schema
  isEnabled: boolean;
  lastLogin?: Date;
  preLastLogin?: Date;
  isDeleted: boolean;
  devices: unknown[];
}

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `usersIdGet()` */
  static readonly UsersIdGetPath = '/users/{id}';

  /**
   * Retrieve user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdGet$Response(params: UsersIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSchema>> {
    return usersIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdGet(params: UsersIdGet$Params, context?: HttpContext): Observable<UserSchema> {
    return this.usersIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSchema>): UserSchema => r.body),
    );
  }

  /** Path part for operation `usersIdPut()` */
  static readonly UsersIdPutPath = '/users/{id}';

  /**
   * Update user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersIdPut$Response(params: UsersIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSchema>> {
    return usersIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersIdPut(params: UsersIdPut$Params, context?: HttpContext): Observable<UserSchema> {
    return this.usersIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSchema>): UserSchema => r.body),
    );
  }

  /** Path part for operation `usersIdDelete()` */
  static readonly UsersIdDeletePath = '/users/{id}';

  /**
   * Delete user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdDelete$Response(params: UsersIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdDelete(params: UsersIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.usersIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body),
    );
  }

  /** Path part for operation `usersGet()` */
  static readonly UsersGetPath = '/users';

  /**
   * List users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGet$Response(params?: UsersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSchema[]>> {
    return usersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersGet(params?: UsersGet$Params, context?: HttpContext): Observable<UserSchema[]> {
    return this.usersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSchema[]>): UserSchema[] => r.body),
    );
  }

  /** Path part for operation `usersPost()` */
  static readonly UsersPostPath = '/users';

  /**
   * Create user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPost$Response(params?: UsersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSchema>> {
    return usersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPost(params?: UsersPost$Params, context?: HttpContext): Observable<UserSchema> {
    return this.usersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSchema>): UserSchema => r.body),
    );
  }

  /** Path part for operation `usersMeGet()` */
  static readonly UsersMeGetPath = '/users/me';

  /**
   * Retrieve current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersMeGet$Response(params?: UsersMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSchema>> {
    return usersMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersMeGet(params?: UsersMeGet$Params, context?: HttpContext): Observable<UserSchema> {
    return this.usersMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSchema>): UserSchema => r.body),
    );
  }

  /** Path part for operation `usersMeDelete()` */
  static readonly UsersMeDeletePath = '/users/me';

  /**
   * Delete current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersMeDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersMeDelete$Response(params?: UsersMeDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersMeDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersMeDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersMeDelete(params?: UsersMeDelete$Params, context?: HttpContext): Observable<void> {
    return this.usersMeDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body),
    );
  }

  /** Path part for operation `usersIdPasswordPut()` */
  static readonly UsersIdPasswordPutPath = '/users/{id}/password';

  /**
   * Update password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersIdPasswordPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersIdPasswordPut$Response(
    params: UsersIdPasswordPut$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<UserSchema>> {
    return usersIdPasswordPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersIdPasswordPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersIdPasswordPut(params: UsersIdPasswordPut$Params, context?: HttpContext): Observable<UserSchema> {
    return this.usersIdPasswordPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSchema>): UserSchema => r.body),
    );
  }

  /** Path part for operation `usersIdPasswordResetPut()` */
  static readonly UsersIdPasswordResetPutPath = '/users/{id}/passwordReset';

  /**
   * Reset other users password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersIdPasswordResetPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersIdPasswordResetPut$Response(
    params: UsersIdPasswordResetPut$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<UserSchema>> {
    return usersIdPasswordResetPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Reset other users password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersIdPasswordResetPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersIdPasswordResetPut(params: UsersIdPasswordResetPut$Params, context?: HttpContext): Observable<UserSchema> {
    return this.usersIdPasswordResetPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSchema>): UserSchema => r.body),
    );
  }
}

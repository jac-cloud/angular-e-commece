/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authCheckJwtGet } from '../fn/auth/auth-check-jwt-get';
import { AuthCheckJwtGet$Params } from '../fn/auth/auth-check-jwt-get';
import { authPost } from '../fn/auth/auth-post';
import { AuthPost$Params } from '../fn/auth/auth-post';
import { authRefreshPost } from '../fn/auth/auth-refresh-post';
import { AuthRefreshPost$Params } from '../fn/auth/auth-refresh-post';
import { authRegisterPost } from '../fn/auth/auth-register-post';
import { AuthRegisterPost$Params } from '../fn/auth/auth-register-post';
import { authRenewJwtGet } from '../fn/auth/auth-renew-jwt-get';
import { AuthRenewJwtGet$Params } from '../fn/auth/auth-renew-jwt-get';
import { authSocialloginPost } from '../fn/auth/auth-sociallogin-post';
import { AuthSocialloginPost$Params } from '../fn/auth/auth-sociallogin-post';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authCheckJwtGet()` */
  static readonly AuthCheckJwtGetPath = '/auth/checkJWT';

  /**
   * Check JWT Validity.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authCheckJwtGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  authCheckJwtGet$Response(params?: AuthCheckJwtGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return authCheckJwtGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Check JWT Validity.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authCheckJwtGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authCheckJwtGet(params?: AuthCheckJwtGet$Params, context?: HttpContext): Observable<any> {
    return this.authCheckJwtGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `authRenewJwtGet()` */
  static readonly AuthRenewJwtGetPath = '/auth/renewJWT';

  /**
   * Renew JWT.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authRenewJwtGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  authRenewJwtGet$Response(params?: AuthRenewJwtGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return authRenewJwtGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Renew JWT.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authRenewJwtGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authRenewJwtGet(params?: AuthRenewJwtGet$Params, context?: HttpContext): Observable<any> {
    return this.authRenewJwtGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `authPost()` */
  static readonly AuthPostPath = '/auth';

  /**
   * Authenticate.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authPost$Response(params?: AuthPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return authPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Authenticate.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authPost(params?: AuthPost$Params, context?: HttpContext): Observable<any> {
    return this.authPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `authSocialloginPost()` */
  static readonly AuthSocialloginPostPath = '/auth/sociallogin';

  /**
   * Authenticate with social login.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authSocialloginPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authSocialloginPost$Response(params?: AuthSocialloginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return authSocialloginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Authenticate with social login.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authSocialloginPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authSocialloginPost(params?: AuthSocialloginPost$Params, context?: HttpContext): Observable<any> {
    return this.authSocialloginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `authRefreshPost()` */
  static readonly AuthRefreshPostPath = '/auth/refresh';

  /**
   * refresh.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authRefreshPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRefreshPost$Response(params?: AuthRefreshPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return authRefreshPost(this.http, this.rootUrl, params, context);
  }

  /**
   * refresh.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authRefreshPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRefreshPost(params?: AuthRefreshPost$Params, context?: HttpContext): Observable<any> {
    return this.authRefreshPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `authRegisterPost()` */
  static readonly AuthRegisterPostPath = '/auth/register';

  /**
   * Register an user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authRegisterPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRegisterPost$Response(params?: AuthRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return authRegisterPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Register an user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authRegisterPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRegisterPost(params?: AuthRegisterPost$Params, context?: HttpContext): Observable<any> {
    return this.authRegisterPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
